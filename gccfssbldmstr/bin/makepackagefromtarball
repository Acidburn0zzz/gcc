#!/bin/ksh

# This script creates the Solaris packages for gcc4ss.
# One of two packages is created:  one to contain the gcc components, 
# one to contain the components from the Sun Studio compiler.
# Which package gets created is determined by the <copyright> argument.
# The contents of the packages are created from the tarballs generated by
# buildForTarball.
# Two tarballs are required--one from the Solaris 9 build, one from Solaris 10.
# The two are combined such that any common files are taken from the Solaris 9
# tarball.
# The package containing the Studio components is created solely from the
# Solaris 9 tarball.

trap 'echo ERROR; exit 1' ERR

# All scripts are run from the same directory as this one.
SCRIPTDIR=$(/bin/dirname $0)
                                                                                
# Set common configuration variables
. $SCRIPTDIR/commonconfig

PROTOFILE=/tmp/$$.proto.tmp
PKGINFOFILE=/tmp/$$.pkginfo.tmp
PKGMAKELOG=/tmp/$$.pkgmakelog.tmp
DEPENDFILE=/tmp/$$.depend.tmp
COPYRIGHTFILE=/tmp/$$.copyright.tmp
TEMPFILE=/tmp/$$.temp.tmp

function usage {
	cat <<EOF
	Usage: $0 <copyright> <installdir> <s9tarball> <s10tarball>
	where <copyright> is either sun or gcc,
	<installdir> is where tarball and package are to be installed (/opt),
	<s9tarball> is the tarball containing the Solaris 9 build to be packaged
	<s10tarball> is the tarball containing the Solaris 10 build to be packaged
EOF
	exit 1
}

function removeExistingInstallation {
        typeset installdir=$1
        echo "Removing existing installation of SGCC ..."
        /bin/pkginfo | /bin/egrep "$GCCPACKAGE|$SUNPACKAGE" > /dev/null
        if [ $? = 0 ]
        then
                echo "SGCC was installed using packages.  Remove manually."
                exit 2
        fi
 
        rm -rf $installdir/$GCCINSTSUBDIR
        rm -rf $installdir/$SUNINSTSUBDIR
}
 


if [ $# -ne 4 ]
then
	usage
fi

CPYRTARG=$1
INSTALLDIR=$2
S9TARBALL=$3
S10TARBALL=$4

DESTDIR=$INSTALLDIR/pkgmk_tmp
SUNPACKAGEDESC="Sun(TM) Code Generator for SPARC(R) Systems"
GCCPACKAGEDESC="GCC for SPARC(R) Systems"
case $CPYRTARG in
	gcc)	cp /net/mf-umpk16-02/export/s10/solarisdvd.s10s_dvd/latest/Solaris_10/Product/SUNWgcc/install/copyright $COPYRIGHTFILE
		PACKAGEDESC="$GCCPACKAGEDESC"
		PKGID=$GCCPACKAGE
		DEPENDPKGID=$SUNPACKAGE
		;;
	sun)	echo "Copyright 2007 Sun Microsystems, Inc. All rights reserved." > $COPYRIGHTFILE
		PACKAGEDESC="$SUNPACKAGEDESC"
		PKGID=$SUNPACKAGE
		;;
	*)	usage;;
esac


if [ ! -d $INSTALLDIR ]
then
	echo "$INSTALLDIR does not exist"
	usage
fi

if [ ! -f $S9TARBALL ]
then
	echo "$S9TARBALL does not exist"
	usage
fi

if [ ! -f $S10TARBALL ]
then
	echo "$S10TARBALL does not exist"
	usage
fi

if [ -d $DESTDIR/$PKGID ]
then
	echo $DESTDIR/$PKGID exists.  Remove it.
	exit 2
fi

if [ -e $INSTALLDIR/$GCCINSTSUBDIR -o -e $INSTALLDIR/$SUNINSTSUBDIR ]
then
        removeExistingInstallation $INSTALLDIR
fi

if [ ! -d $DESTDIR ]
then
	mkdir $DESTDIR
fi

cd $INSTALLDIR
# Untar S9 after S10 so that all common files are the S9 versions.
tar xf $S10TARBALL
tar xf $S9TARBALL
chown -R root $GCCINSTSUBDIR
chgrp -R sys $GCCINSTSUBDIR

cat > $PKGINFOFILE <<EOF
PKG=$PKGID
ARCH=sparc
SUNW_ISA=sparc
VERSION=4.0.4
NAME="$PACKAGEDESC"
CATEGORY=application
BASEDIR=$INSTALLDIR
EOF

echo > $PROTOFILE

if [ ! "" = "$DEPENDPKGID" ]
then
	cat > $DEPENDFILE <<EOF
P $DEPENDPKGID	$SUNPACKAGEDESC
EOF
	echo "i depend=$DEPENDFILE" >> $PROTOFILE
fi

cd $INSTALLDIR
echo "i pkginfo=$PKGINFOFILE" >> $PROTOFILE
echo "i copyright=$COPYRIGHTFILE" >> $PROTOFILE

# Add the files to the prototype, changing permissions to root/sys
case $CPYRTARG in
	gcc)	pkgproto $GCCINSTSUBDIR > $TEMPFILE;;
	sun)	pkgproto $SUNINSTSUBDIR > $TEMPFILE;;
	*)	echo "Error: Invalid component set specified: $CPYRTARG" >&2
		exit 1;;
esac
/bin/awk '{printf "%s %s %s %s root sys\n", $1, $2, $3, $4}' $TEMPFILE >> $PROTOFILE

pkgmk -b $INSTALLDIR -f $PROTOFILE -d $DESTDIR 2>&1 | tee $PKGMAKELOG

echo
echo "Output from pgkchk:"
pkgchk -d $DESTDIR $PKGID

echo "Tarring up package..."
cd $DESTDIR
tar cf $PKGID.tar $PKGID

rm /tmp/$$.*.tmp
