/* translates tree gimple into Sun IR.
   Copyright (C) 2007, 2008 by Sun Microsystems, Inc. All rights reserved.  
   File is licensed under the GNU Public License.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#ifndef _IRLIB_H_
#define _IRLIB_H_

#ifdef __cplusplus
extern "C" {
#endif
                                                                                
#include "IrProc.h"
#include "IrModule.h"

/* Error classes generated by libsunir */
typedef enum {
	IR_ERR_FIRST,
	IR_ERR_NONE = IR_ERR_FIRST,	/* No error */
	IR_ERR_ALL,			/* Union of all other error classes */
	IR_ERR_OTHER,			/* Error not in another error class */
	IR_ERR_OUTOFMEMORY,		/* Out of memory error */
	IR_ERR_FILEIO, 			/* File I/O error */
	IR_ERR_VERSION,			/* SunIR version mismatch */
	IR_ERR_ILLEGALACTION,		/* Illegal user action (e.g., bad arg)*/
	IR_ERR_INTERNAL,		/* Internal error (bug) */
	IR_ERR_LAST = IR_ERR_INTERNAL
} ir_err_class_t;

/* Error action codes.  These are used to specify the action that should
   be taken when an error of a particular class is encountered. */
typedef enum {
	IR_ACT_ABORT,	/* Abort on error */
	IR_ACT_RETURN,	/* Return a failure value on error */
	IR_ACT_CALLBACK	/* Call a user-specified routine, then return failure */
} ir_err_action_t;

/* Callback function provided by user to be called when encountering an error */
typedef void (*ir_err_callback_t)(ir_err_class_t, void*);

/* Specify the size, in bytes, of an object in memory.The size specified must be greater than or equal to the "standard" size ofthe object. */
BOOLEAN ir_lib_set_leaf_size(unsigned bytes);
BOOLEAN ir_lib_set_triple_size(unsigned bytes);
BOOLEAN ir_lib_set_block_size(unsigned bytes);
BOOLEAN ir_lib_set_segment_size(unsigned bytes);
BOOLEAN ir_lib_set_loopinfo_size(unsigned bytes);
BOOLEAN ir_lib_set_pragmainfo_size(unsigned bytes);
BOOLEAN ir_lib_set_dda_size(unsigned bytes);
BOOLEAN ir_lib_set_typenode_size(unsigned bytes);

/* Specify the action to be taken when an error of a given class occurs. */
BOOLEAN ir_lib_set_error_action(ir_err_class_t eClass, ir_err_action_t eAction, 
		ir_err_callback_t eCallbackFunc, void *udata);

/* Retrieve the class of the most recent error encountered by libsunir. */
ir_err_class_t ir_lib_error_class(void);

/* Reset the most recent error to IR_ERR_NONE */
void ir_lib_error_class_reset(void);

#ifdef __cplusplus
}
#endif

#endif
