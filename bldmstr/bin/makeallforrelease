#!/bin/ksh

# This script builds, installs, and creates tarballs for the official gcc4ss
# builds to be placed in /pkg (internal to SWAN) and in /opt (for external
# release.)  It also builds packages for the /opt version.

# The /opt package contain components of both the Solaris 9 and
# Solaris 10 builds. The packages are only created on Solaris 9.
# On Solaris 9, the script will wait until the Solaris 10 build has finished 
# creating tarballs and then continue on to make the packages.

trap 'echo ERROR; exit 1' ERR

# All scripts are run from the same directory as this one.
export SCRIPTDIR=$(/bin/dirname $0)

# Set common configuration variables
. $SCRIPTDIR/commonconfig
                                                                                
function usage {
	cat <<EOF
Usage: $0 <uid> <datestring> 
where	<uid> is the user ID under which you want to do non-root activities
and	<datestring> is the date string of the nightly build on which all
	release deliverables are to be based (e.g., 20050908).
EOF
	exit 1
}

if [ $# -ne 2 ]
then
	usage
fi

UID=$1
DATESTRING=$2

if [ ! "root" = $(/usr/xpg4/bin/id -u -n) ]
then
	echo "ERROR: You must be root to run this script."
	exit 1
fi

# Determine the OS.
OS=`/bin/uname -r`
case $OS in
	5.9)	OSDIR=s9;;
	5.10)	OSDIR=s10;;
	*)	echo "ERROR: This script must be run on Solaris 9 or Solaris 10"
		exit 1;;
esac

# Determine the build area for this machine.
BUILDAREA=$(${SCRIPTDIR}/getBuildAreaForMachine)

# Don't overwrite an existing build

if [ -d ${BUILDAREA}/${DATESTRING}_mars_gcc.${OSDIR}.pkg.tarbuild ]
then
        echo "ERROR: A build already exists for ${DATESTRING}.  Please remove build or change build date."
        exit 1
fi

ORIGBUILDAREA=$(${SCRIPTDIR}/getBuildAreaForMachine $BUILDMACHINE_s9)


# Make sure we can execute commands as the specified user.
rm -f /tmp/$$.sutest.tmp
su ${UID} -c "touch /tmp/$$.sutest.tmp"
if [ ! -f /tmp/$$.sutest.tmp ]
then
	echo "ERROR: Unable to execute commands as $UID"
	exit 1
fi
rm -f /tmp/$$.sutest.tmp


#########################################################################
# Wait for the Solaris 10 tarball to be created.
#########################################################################

function wait_for_s10_build {

	s10tarball=/import/dr3/gcc2ir_tarballs/${DATESTRING}/sgcc.s10.opt.tar 

	# Check every 10 minutes to see if the S10 tarball exists.
	# After 6 hours we assume the S10 build died and give up.
	for hour in 1 2 3 4 5 6
	do
		for interval in 1 2 3 4 5 6
		do
			if [ ! -e $s10tarball ]
			then
				sleep 600
			else
				return 0
			fi
		done
	done
	# We've waited long enough.  Die now.
	echo "Error:  Timed out waiting for Solaris 10 build to finish."
	exit 2
}


#########################################################################
# Make /pkg tarballs.
#########################################################################

function make_for_slash_pkg {
	TAG=pkg
	
	# If /pkg exists, verify that it is not remotely mounted
	if [ -e /pkg ]
	then
		df /pkg | grep /dev/dsk > /dev/null
		if [ $? -ne 0 ]
		then 
			echo "ERROR: /pkg is remotely mounted.  Unmount /pkg or use a different machine."
			exit 1
		fi
	fi
	
	# Remove anything under /pkg and allow the user to create things there.
	# This is necessary so that the build can install in that location.
	rm -rf /pkg
	mkdir -p /pkg/isv/packages
	chown -R $UID /pkg
	
	# Perform the build that installs in the /pkg area.
	su $UID -c "/bin/ksh ${SCRIPTDIR}/buildForTarball /pkg/isv/packages/sgcc ${DATESTRING}_mars_gcc"
	
	# Remove the installation just created by the build.
	rm -rf /pkg/isv/packages
	
	# Install from the tarball created by the build.
	tar xf ${BUILDAREA}/${DATESTRING}_mars_gcc.${OSDIR}.${TAG}.tarbuild/sgcc.${OSDIR}.${TAG}.tar
	
	# Verify that the tarball installed into the correct place.
	if [ ! -d /pkg/isv/packages/sgcc ]
	then
		echo "ERROR: The tarball just built did not install into the correct location under /pkg"
		exit 1
	fi
	
	# Move the tarball to the archive directory.
	su ${UID} -c "mkdir -p /import/dr3/gcc2ir_tarballs/${DATESTRING}; cp ${BUILDAREA}/${DATESTRING}_mars_gcc.${OSDIR}.${TAG}.tarbuild/sgcc.*.tar /import/dr3/gcc2ir_tarballs/${DATESTRING}"

	# Remove the /pkg area.
	rm -rf /pkg/isv/packages
}


#########################################################################
# Make /opt tarballs and packages.
#########################################################################

function make_for_opt {
	TAG=opt
	
	# Remove anything under /opt/sgcc and allow the user to create 
	# files under it.
	rm -rf /opt/$GCCINSTSUBDIR /opt/$SUNINSTSUBDIR /opt/pkgmk_tmp
	mkdir -p  /opt/$GCCINSTSUBDIR /opt/$SUNINSTSUBDIR /opt/pkgmk_tmp
	chown ${UID} /opt/$GCCINSTSUBDIR /opt/$SUNINSTSUBDIR /opt/pkgmk_tmp
	
	# Build and install the compiler under /opt
	su ${UID} -c "/bin/ksh ${SCRIPTDIR}/buildForTarball /opt ${DATESTRING}_mars_gcc"
	
	# Move the tarballs to the archive directory.
	su ${UID} -c "mkdir -p /import/dr3/gcc2ir_tarballs/${DATESTRING}; cp ${BUILDAREA}/${DATESTRING}_mars_gcc.${OSDIR}.${TAG}.tarbuild/sgcc.*.tar /import/dr3/gcc2ir_tarballs/${DATESTRING}"

	# Make packages from the tarballs just created.
	if [ $OSDIR = s9 ]
	then
		# Make sure the Solaris 10 tarball is available.
		wait_for_s10_build ${DATESTRING}

		${SCRIPTDIR}/makepackagefromtarball sun /opt /import/dr3/gcc2ir_tarballs/${DATESTRING}/sgcc.s9.opt.tar /import/dr3/gcc2ir_tarballs/${DATESTRING}/sgcc.s10.opt.tar 
		${SCRIPTDIR}/makepackagefromtarball gcc /opt /import/dr3/gcc2ir_tarballs/${DATESTRING}/sgcc.s9.opt.tar /import/dr3/gcc2ir_tarballs/${DATESTRING}/sgcc.s10.opt.tar 

		# Move the packages to the archive area.
		su ${UID} -c "mkdir -p /import/dr3/gcc2ir_packages/${DATESTRING}; cd /opt/pkgmk_tmp; find ${SUNPACKAGE}* ${GCCPACKAGE}* -print | cpio -pd /import/dr3/gcc2ir_packages/${DATESTRING}"
	fi
        
	rm -rf /opt/pkgmk_tmp
	
	# Remove the installation area from /opt.
	rm -rf /opt/$GCCINSTSUBDIR
	rm -rf /opt/$SUNINSTSUBDIR
}


function test_slash_pkg_install {
	typeset DATESTR=$1
	typeset OSD=$2

	echo "Testing /pkg installation..."

	SRCFILE=/tmp/$$.hello.c
	EXEFILE=/tmp/$$.a.out
	
	cat <<EOF > $SRCFILE
#include <stdio.h>
	int main()
	{
		printf ("hello world\n");
		return 0;
	}
EOF
	
	set -x
	
	rm -rf /foo
	rm -rf /pkg
	mkdir -p /pkg/isv/packages
	cd /pkg/isv/packages
	tar xf /import/dr3/gcc2ir_tarballs/${DATESTR}/sgcc.${OSD}.pkg.tar
	cd -
	
	/pkg/isv/packages/sgcc/${GCCINSTSUBDIR}/bin/gcc -O3 -o $EXEFILE $SRCFILE
	$EXEFILE > /dev/null
	
	# Test /pkg when it is a symbolic link to another location.
	
	mkdir -p /foo/pkg.SFBay/export/pkg.sparc.sunos5/isv/packages
	mv /pkg/isv/packages/sgcc /foo/pkg.SFBay/export/pkg.sparc.sunos5/isv/packages
	rm -rf /pkg
	ln -s /foo/pkg.SFBay/export/pkg.sparc.sunos5 /pkg
	
	/pkg/isv/packages/sgcc/${GCCINSTSUBDIR}/bin/gcc -O3 -o $EXEFILE $SRCFILE
	$EXEFILE > /dev/null

	rpathlines=$(/usr/ccs/bin/elfdump -d /pkg/isv/packages/sgcc/${GCCINSTSUBDIR}/bin/g++ | grep RUNPATH | wc -l)
	if [ 0 -ne $rpathlines ]
	then
		echo "Error: The /pkg installation contains a RUNPATH."
		exit 1
	fi

	# Remove the installation.
	rm -rf /pkg
	rm -rf /foo

	rm -f $SRCFILE $EXEFILE
}

make_for_opt

make_for_slash_pkg

test_slash_pkg_install ${DATESTRING} ${OSDIR}
