#!/bin/ksh -f

PATH=/bin:/usr/bin

# All scripts are run from the same directory as this one.
SCRIPTDIR=$(dirname $0)

# Set common configuration variables
. $SCRIPTDIR/commonconfig

# See if there were any new failures in the given test comparison file.
# If so, return 1, otherwise, return 0.
function testsHaveFailures 
{
    typeset resultfile=$1
    
    if [ ! -e $resultfile ]
    then
	echo >&2 "Test comparision file $resultfile does not exist."
	echo 1
	return
    fi
    
    grep '^>' $resultfile > /dev/null
    if [ $? -eq 0 ]
    then
	# There were new failures.
	echo 1
    else
	echo 0
    fi
}

# Wait for the named file or directory to exist.
function waitForFile {
    typeset filename=$1

    for try in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 
    do
        if [ ! -e $filename ]
        then
            echo "$filename isn't ready ... try $try"
            # 10 min nap
            sleep 600
        fi
    done
    if [ ! -e $filename ]
    then
        echo "$filename still isn't ready. Probably Solaris 9 build failed"
        exit 1
    fi
}

function updateCurrent 
{
    if [ $BUILDTYPE == "sparc-linux" ]
    then
        echo "Copy the compiler to common place /ws/gccfss/builds. " 
	COMMONDIR=/ws/gccfss/builds/4.3.2_linux
	mkdir $COMMONDIR/$BUILDNAME
	(cd $INSTALLDIR; find . | cpio -pdum $COMMONDIR/$BUILDNAME/)
    fi
    
    if [ 1 = `testsHaveFailures $BUILDDIR/logs/test.comparison` ]
    then
	echo "The $BUILDTYPE build had new test failures."
	echo "Current has not been updated."
	exit 1;
    fi
    
    (cd $INSTALLAREA; rm current_gcc ; ln -s $BUILDNAME current_gcc)
    echo Build $INSTALLDIR is now current.
}

BUILDNAME=`date +\%Y\%m\%d`_aten_gcc440
BACKEND_COMP_BUILDNAME=`date +\%Y\%m\%d`_aten_gcc440
XSUFFIX=x
S11SUFFIX=_s11
INTELSUFFIX=i

if [ $# -gt 0 ]
then
	BUILDNAME=$1
fi

BUILDAREA=$(${SCRIPTDIR}/getBuildAreaForMachine)
if [ $? -ne 0 ]
then
	exit 1
fi

# BUILDTYPE should be one of the following
# 
#  sparc-solaris
#  sparc-opensolaris
#  i386-solaris
#  i386-opensolaris  // dont do automatically yet
#  i386-sparc

BUILDTYPE="sparc-solaris"

if [ `uname -s` == SunOS ]
then
    if [ `uname -p` == sparc ]
    then
        if [ `uname -r` == 5.11 ]
        then
            BUILDTYPE="sparc-opensolaris"
        else
            BUILDTYPE="sparc-solaris"
        fi
    elif [ `uname -p` == i386 ]
    then
        if [ `uname -r` == 5.11 ]
        then
            BUILDTYPE="i386-sparc"
        else
            BUILDTYPE="i386-solaris"
        fi
    fi
else
    BUILDTYPE="sparc-linux"
fi

case $BUILDTYPE in
    sparc-solaris) INSTALLAREA=/ws/gccfss/builds/$GCC_VERSION;;
    sparc-opensolaris) INSTALLAREA=/ws/gccfss/builds/$GCC_VERSION$S11SUFFIX;;
    sparc-linux)  INSTALLAREA=/net/perftech-064/data/compilers;;
    i386-solaris)  INSTALLAREA=/ws/gccfss/builds/$GCC_VERSION$INTELSUFFIX;;
    i386-sparc)   INSTALLAREA=/ws/gccfss/builds/$GCC_VERSION$XSUFFIX;;
    *)	echo >&2 "Error:  Unsupported build type"
	exit 1;;
esac

BUILDDIR=$BUILDAREA/$BUILDNAME
INSTALLDIR=$INSTALLAREA/$BUILDNAME

if [ $BUILDTYPE == sparc-opensolaris ]
then
    # cross compiler/opensolaris still waits for the sparc build to complete
    waitForFile /ws/gccfss/builds/$GCC_VERSION/$BACKEND_COMP_BUILDNAME/$SUNINSTSUBDIR/$GCC_VERSION/prod/lib/xprof_fini.o
    ${SCRIPTDIR}/gcc2ir_master_build -i $INSTALLDIR -v $GCC_VERSION -b $BUILDTYPE \
        -s /ws/gccfss/builds/$GCC_VERSION/$BACKEND_COMP_BUILDNAME/$SUNINSTSUBDIR $BUILDDIR
elif [ $BUILDTYPE == i386-sparc ]
then
    # cross compiler/opensolaris still waits for the sparc build to complete
    waitForFile /ws/gccfss/builds/$GCC_VERSION/$BACKEND_COMP_BUILDNAME/$SUNINSTSUBDIR/$GCC_VERSION/prod/lib/xprof_fini.o
    ${SCRIPTDIR}/gcc2ir_master_build -i $INSTALLDIR -v $GCC_VERSION -b $BUILDTYPE \
        -p /ws/gccfss/builds/$GCC_VERSION/$BACKEND_COMP_BUILDNAME/$SUNINSTSUBDIR/$GCC_VERSION  $BUILDDIR
else
    ${SCRIPTDIR}/gcc2ir_master_build -i $INSTALLDIR -v $GCC_VERSION -b $BUILDTYPE $BUILDDIR
fi

if [ $? -ne 0 ]
then
	# There was some build failure.
	exit $?
fi

updateCurrent
exit 0

